<?php

namespace Tests\Integration\Actions\Claims;

use PDO;
use Tests\TestCase;
use App\Models\Claim;
use App\Models\ClaimType;
use App\Models\Claim2File;
use Illuminate\Support\Str;
use App\Models\ClaimStatus;
use App\Models\ClaimRevision;
use App\Models\Claim2Section;
use App\Models\ClaimType2EAV;
use App\Models\ClaimStatus2Eav;
use App\Models\Claim2EavInstance;
use App\Models\ClaimsSectionType;
use Illuminate\Support\Facades\DB;
use Buckhill\LibEAV\Models\DataTransfer\Object\ObjectMetadata;
use App\Http\Actions\API\v1\Claims\CreateClaim\CreateClaimState;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\UploadFiles;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CollectEAVInput;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\ValidateEAVInput;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CollectEAVObjects;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CreateClaimRecord;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\RefreshClaimModel;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CreateEAVInstances;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CreateFinancialSections;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CollectEAVObjectsFromType;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CreateClaimRevisionRecord;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CreateJunctionConnections;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\CollectEAVObjectsFromStatus;
use App\Http\Actions\API\v1\Claims\CreateClaim\Stages\StartClaimDatabaseTransaction;

class CreateClaimPipelineTest extends TestCase
{
    protected static $setup = false;
    public static string $claim_uuid; // needed for update test
    public static array $uploaded_files = []; // needed for update test, it uses ID's from these models to test file inheritance

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if(!static::$setup)
        {
            // Set the database up

            $this->setUpDatabaseState();

            static::$setup = true;
        }
    }

    public function test_create_claim_state_object_passes(): CreateClaimState
    {
        // The eav connection, look in config.database.eav
        $pdo = DB::connection('eav')->getPdo();

        $generated_eav_input = $this->getEAVInput();
        // Generate the eav payload
        $payload = array_merge($this->providePayload(), ['eav' => $generated_eav_input]);

        // Turn off autocommit. Starting a transaction does the same, however we're explicit so that the one reading this
        // test understands what's going on. Autocommit is off therefore we don't commit record(s) produced by this test
        // unless transaction succeeds
        $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
        DB::connection()->getPdo()->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);

        $state = new CreateClaimState($payload, $pdo);

        $this->assertArrayHasKey('uuid', $state->getClaimData());
        $this->assertArrayHasKey('custom_id', $state->getClaimData());
        $this->assertArrayHasKey('policy_id', $state->getClaimData());
        $this->assertArrayHasKey('external_ref', $state->getClaimData());
        $this->assertArrayHasKey('company_id', $state->getClaimData());
        $this->assertInstanceOf(PDO::class, $state->pdo);

        return $state;
    }

    /**
     * @depends test_create_claim_state_object_passes
     */
    public function test_collect_eav_objects_from_status_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CollectEAVObjectsFromStatus();

        $state = $stage->handle($state);

        $values = $state->getEavObjectIdentifiers();

        $this->assertIsArray($values);
        $this->assertNotEmpty($values);
        $this->assertArrayHasKey('identifier', $values[0]);
        $this->assertArrayHasKey('table', $values[0]);
        $this->assertArrayHasKey('id', $values[0]);

        return $state;
    }

    /**
     * @depends test_collect_eav_objects_from_status_succeeds
     */
    public function test_collect_eav_objects_from_type_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CollectEAVObjectsFromType();

        $state = $stage->handle($state);

        $values = $state->getEavObjectIdentifiers();

        $this->assertIsArray($values);
        $this->assertNotEmpty($values);
        $this->assertTrue(sizeof($values) > 1); // More than 1 record means state changed compared to previous step
        $this->assertArrayHasKey('identifier', $values[1]);
        $this->assertArrayHasKey('table', $values[1]);
        $this->assertArrayHasKey('id', $values[1]);

        return $state;
    }

    /**
     * @depends test_collect_eav_objects_from_type_succeeds
     */
    public function test_collect_eav_objects_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CollectEAVObjects();

        $state = $stage->handle($state);

        $result = $state->getEavObjects();

        $this->assertIsArray($result);
        $this->assertNotEmpty($result);
        $this->assertTrue(sizeof($result) === 3);
        $this->assertIsArray($object = $result[0]);
        $this->assertArrayHasKey('identifier', $object);
        $this->assertArrayHasKey('table', $object);
        $this->assertArrayHasKey('id', $object);
        $this->assertArrayHasKey('metadata', $object);
        $this->assertArrayHasKey('fields', $object);
        $this->assertArrayHasKey('input', $object);
        $this->assertInstanceOf(ObjectMetadata::class, $object['metadata']);

        return $state;
    }

    /**
     * @depends test_collect_eav_objects_succeeds
     */
    public function test_collect_eav_input_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CollectEAVInput();

        $dataset_identifier = '8cfc936d-a678-11ea-b4d4-4a28775f739c';

        $state = $stage->handle($state);

        $result = $state->getEavObjects();

        $this->assertIsArray($result);

        // assert that data for dataset 8cfc936d-a678-11ea-b4d4-4a28775f739c is available
        foreach($result as $object)
        {
            if($object['identifier'] === $dataset_identifier)
            {
                $this->assertIsArray($object['input']['data']);
                $this->assertIsArray($object['input']['multi_data']);
                $this->assertNotEmpty($object['input']['data']);
                $this->assertNotEmpty($object['input']['multi_data']);
            }
        }

        return $state;
    }

    /**
     * @depends test_collect_eav_input_succeeds
     */
    public function test_validate_eav_input_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new ValidateEAVInput();

        $state = $stage->handle($state);

        $this->assertInstanceOf(CreateClaimState::class, $state);

        return $state;
    }

    /**
     * @depends test_validate_eav_input_succeeds
     */
    public function test_start_database_transaction_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new StartClaimDatabaseTransaction();

        $state = $stage->handle($state);

        $this->assertTrue($state->pdo->inTransaction());
        $this->assertTrue(DB::connection()->getPdo()->inTransaction());

        return $state;
    }

    /**
     * @depends test_start_database_transaction_stage_succeeds
     */
    public function test_create_claim_record_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CreateClaimRecord();

        $state = $stage->handle($state);

        $this->assertInstanceOf(Claim::class, $state->getClaim());

        return $state;
    }

    /**
     * @depends test_create_claim_record_stage_succeeds
     */
    public function test_create_claim_revision_record_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CreateClaimRevisionRecord();

        $state = $stage->handle($state);

        $this->assertInstanceOf(ClaimRevision::class, $state->getClaimRevision());

        return $state;
    }

    /**
     * @depends test_create_claim_revision_record_stage_succeeds
     */
    public function test_refresh_claim_record_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new RefreshClaimModel();

        $state = $stage->handle($state);

        $this->assertInstanceOf(Claim::class, $state->getClaim());
        $this->assertNotNull($state->getClaim()->revision);
        $this->assertEquals(1, $state->getClaim()->revision);

        return $state;
    }

    /**
     * @depends test_refresh_claim_record_stage_succeeds
     */
    public function test_create_eav_instances_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CreateEAVInstances();

        $state = $stage->handle($state);

        $instances = $state->getEAVInstanceInfo();

        $this->assertIsArray($instances);
        $this->assertNotEmpty($instances);

        $expected = [
            'claim_id',
            'revision',
            'instance_id',
            'instance_revision',
            'type_id',
            'status_id'
        ];

        foreach($instances as $instance)
        {
            foreach($expected as $key)
            {
                $this->assertArrayHasKey($key, $instance);
            }
        }

        return $state;
    }

    /**
     * @depends test_create_eav_instances_stage_succeeds
     */
    public function test_create_junctions_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CreateJunctionConnections();

        $state = $stage->handle($state);

        $this->assertIsArray($state->getJunctions());
        $this->assertNotEmpty($state->getJunctions());

        foreach($state->getJunctions() as $junction)
        {
            $this->assertInstanceOf(Claim2EavInstance::class, $junction);
        }

        return $state;
    }

    /**
     * @depends test_create_junctions_stage_succeeds
     */
    public function test_create_financial_sections_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new CreateFinancialSections();

        $state = $stage->handle($state);

        $this->assertIsArray($state->getFinancialCollection());
        $this->assertNotEmpty($state->getFinancialCollection());

        foreach($state->getFinancialCollection() as $model)
        {
            $this->assertInstanceOf(Claim2Section::class, $model);
        }

        return $state;
    }

    /**
     * @depends test_create_financial_sections_stage_succeeds
     */
    public function test_upload_files_stage_succeeds(CreateClaimState $state): CreateClaimState
    {
        $stage = new UploadFiles();

        $state = $stage->handle($state);

        $this->assertIsArray($state->getUploadedFiles());
        $this->assertNotEmpty($state->getUploadedFiles());

        foreach($state->getUploadedFiles() as $file)
        {
            $this->assertInstanceOf(Claim2File::class, $file);
        }

        return $state;
    }

    /**
     * @depends test_upload_files_stage_succeeds
     */
    public function test_assign_claim_id_and_files_to_static_values(CreateClaimState $state): void
    {
        static::$claim_uuid = $state->getClaim()->uuid;

        static::$uploaded_files = $state->getUploadedFiles(); // array of Claim2File models

        $this->assertEquals(static::$claim_uuid, $state->getClaim()->uuid);
    }

    protected function providePayload(): array
    {
        return [
            'claim' => [
                'policy_id' => 14,
                'external_ref' => Str::random(32),
                'company_id' => 1,
                'owner_id' => 1,
                'status_id' => 1,
                'type_id' => 1,
                'subtype_id' => 2,
                'handler_company_id' => 3089,
                'handler_user_id' => 0,
                'payee_id' => 0,
                'loss_adjuster_company_id' => 727,
                'loss_adjuster_user_id' => 3093,
                'date_of_loss' => now()->format('Y-m-d H:i:s'),
                'date_adjuster_instructed' => now()->format('Y-m-d H:i:s'),
                'date_claim_concluded' => null,
                'amount_deductible' => 0,
                'amount_loss_adjusters_fee' => 0,
                'amount_reserved' => 0,
                'amount_settlement_paid' => 0,
                'amount_claim_reserved' => 0,
                'amount_claim_final' => 0,
            ],

            'financials' => [
                'amount_deductible' => 140.33,
                'amount_loss_adjusters_fee' => 223.11,
                'amount_reserved' => 1400.99,
                'sections' => [
                    [
                        'section_type_id' => 1,
                        'eoc_id' => 1,
                        'payee_id' => 1,
                        'amount_reserved' => 100.00,
                        'amount_deductible' => 10.00,
                        'apply_surplus_percentage' => 0,
                    ],

                    [
                        'section_type_id' => 2,
                        'eoc_id' => 2,
                        'payee_id' => 1,
                        'amount_reserved' => 200.00,
                        'amount_deductible' => 20.00,
                        'apply_surplus_percentage' => 1,
                    ],
                ],
            ],

            'eav' => [
                // EAV Object identifier
                '8cfc936d-a678-11ea-b4d4-4a28775f739c' => [
                    'data' => [
                        'c2ms5ebd5aae12f687_10088649' => 2,
                        'c2ms5f9006c569e826_59538877' => 1,
                        'c2ms5ebd5b6405cee1_70902709' => "16.03.2021",
                        'c2ms5ebd5b64b771a4_82256694' => "16.03.2022",
                        'c2ms5fae925c9505b4_46897859' => "365.00",
                        'c2ms5ebd5c280bf0b9_00743807' => "2",
                        'c2ms5ebd5c31b1c4c1_24113952' => "",
                        'c2ms5ebd5dfc4d1a16_24647616' => "Cristian Test Ref3",
                        'c2ms5ebd5e0603f5e3_78809544' => "1235 K Street, San Diego, CA, USA",
                        'c2ms5ebd5e428a4ba6_81216542' => "1235",
                        'c2ms5ebd5e4326d4b2_95353457' => "K Street",
                        'c2ms5fd0c0603474d8_08234628' => "",
                        'c2ms5ebd5e4ccca1c9_08815200' => "San Diego",
                        'c2ms5ebd5e5901bc88_30685462' => "CA",
                        'c2ms5ebd5e629c9cf6_30914618' => "92101",
                        'c2ms5ebd5e6c525407_42773329' => "Please Specify ...",
                        'c2ms5ebd5e74444637_63346805' => "",
                        'c2ms5ebd5e74e15944_00531895' => "",
                        'c2ms5ebd5e9fbc92b8_49707233' => "",
                        'c2ms5ebd5f1e1dfa82_77561548' => "0",
                        'c2ms5ebd5f1eb20ef3_57216645' => "0",
                        'c2ms5ebe7665000f24_41933887' => "CO",
                        'c2ms5ebe7a78832ae6_12158796' => "2",
                        'c2ms5ebe7a896e4d26_58191631' => "",
                        'c2ms5ebe7a9b492791_03236044' => "",
                        'c2ms5ebe7a8fa4cd03_60653279' => "",
                        'c2ms5ebe7ad5c96746_78370984' => "",
                        'c2ms5ebe7ad66d1f70_26163505' => "",
                        'c2ms5fd0c0f7c41777_72304612' => "",
                        'c2ms5ebe7aecaae8e7_01065417' => "",
                        'c2ms5ebe7af6b80662_94833542' => "Please specify ...",
                        'c2ms5ebe7b1f14ad86_87991432' => "",
                        'c2ms5ebe7b3247f8b6_37642700' => "Please Specify ...",
                        'c2ms5ebe7b46dff682_78235924' => "",
                        'c2ms5ebe7b4780b828_28105638' => "",
                        'c2ms5ebe7c1ee9cd18_58202184' => "1",
                        'c2ms5ebe7ca367efe8_89460043' => "1",
                        'c2ms5ebe7cc89da269_80900171' => "1",
                        'c2ms5ebe7cee04cbd8_11377229' => "1",
                        'c2ms5ebe7d2a5e8bb0_64402171' => "3.00",
                        'c2ms5ebe7d2af11213_27889881' => "",
                        'c2ms5ebe7d2bca4663_68739350' => "1.00",
                        'c2ms5ebe7d2c64aee8_63264696' => "",
                        'c2ms5f070560f1baa3_66676650' => "",
                        'c2ms5f070561d563d4_53479594' => "5000.00",
                        'c2ms601aaf3e232bc5_38596010' => "12000000.00",
                        'c2ms5ebe7f4b750225_37286318' => "2",
                        'c2ms5ebe7f5110aee7_77773772' => "",
                        'c2ms5ebe7f519b8b64_70224445' => "",
                        'c2ms5ebe80e327c3e3_24950316' => "2"
                    ],

                    'multi_data' => [
                        '8cfc0dff-a678-11ea-b4d4-4a28775f739c' => [
                            [
                                "c2ms5ebe81870cae07_40354243" => "541 South Spring Street, Los Angeles, CA, USA",
                                "c2ms5ebe819ea6cb53_84849513" => "541",
                                "c2ms5ebe819f504680_87341141" => "South Spring Street",
                                "c2ms5fd0c1b2d99449_72487383" => "",
                                "c2ms5ebe81a8b6c2e6_40360918" => "Los Angeles",
                                "c2ms5ebe81b3687890_41851070" => "CA",
                                "c2ms5ebe81dfbb2cd2_15250619" => "90013",
                                "c2ms5ec3e71a0f0e97_96984840" => "Los Angeles County",
                                "c2ms5ebe81f090e1f3_34232095" => "2391",
                                "c2ms5ebe8224e040b4_20015869" => "34.0465085",
                                "c2ms5ebe8225811172_62780880" => "-118.2507394",
                                "c2ms5ebe8234166a58_32289595" => "541 S Spring St",
                                "c2ms5ebe824a1e2264_23574933" => "3",
                                "c2ms5ebe8256828f17_88449575" => "3",
                                "c2ms5ebe8261835ae4_72731516" => "3",
                                "c2ms5ebe82883c4c02_26205534" => "1",
                                "c2ms5ebe8292014ba3_15624834" => "2",
                                "c2ms5ebe82aaad7127_57149425" => "10000000.00",
                                "c2ms5ebe82b4a092c6_43811695" => "",
                                "c2ms5f0700ead5c485_36435315" => "200000.00",
                                "c2ms6022776b2ad751_19371410" => "300000.00",
                                "c2ms601aaf6fe84a88_11395294" => "100000.00",
                                "c2ms5f0700e83625e5_41388976" => "0.01000000",
                                "c2ms5f0700ebc11416_86077698" => "0.00000000",
                                "c2ms604b4fa2623586_30150508" => "0.00",
                                "c2ms5ffc41e2d2e5d2_80041972" => "0.03850000",
                                "c2ms5ffc41f2536d68_61175868" => "0.00000000",
                                "c2ms5ffc41f3a775a7_16038839" => "1.00000000",
                                "c2ms5ffc41f51a2c11_79991904" => "0.02800000",
                                "c2ms5ffc41f6736ea7_29507561" => "0.02800000",
                                "c2ms5fd0d0a14665e2_70058467" => "0.00000000",
                                "c2ms5fd0d0a29b8f05_46533208" => "0.02800000",
                                "c2ms5fd0d0a3c311c0_89547181" => "0.03150000",
                                "c2ms5fd0d0a50bcc76_36938064" => "10000000.00000000",
                                "c2ms5fd0d0a645d219_92656045" => "300000.00000000",
                                "c2ms5fd0d0a775fc22_48704390" => "200000.00000000",
                                "c2ms5fd0d0a8a10c10_49835334" => "100000.00000000",
                                "c2ms5fd0d0a9c8abd5_15945776" => "1.00000000",
                                "c2ms5fd0d0ab00d475_33762204" => "0.03150000",
                                "c2ms5f7d966dc73dd7_07375897" => "",
                                "c2ms5f7d96730a71a7_39400430" => "",
                                "c2ms5f7d96793b33f2_78330955" => ""
                            ],

                            [
                                "c2ms5ebe81870cae07_40354243" => "541 South Spring Street, Los Angeles, CA, USA",
                                "c2ms5ebe819ea6cb53_84849513" => "541",
                                "c2ms5ebe819f504680_87341141" => "South Spring Street",
                                "c2ms5fd0c1b2d99449_72487383" => "",
                                "c2ms5ebe81a8b6c2e6_40360918" => "Los Angeles",
                                "c2ms5ebe81b3687890_41851070" => "CA",
                                "c2ms5ebe81dfbb2cd2_15250619" => "90013",
                                "c2ms5ec3e71a0f0e97_96984840" => "Los Angeles County",
                                "c2ms5ebe81f090e1f3_34232095" => "2391",
                                "c2ms5ebe8224e040b4_20015869" => "34.0465085",
                                "c2ms5ebe8225811172_62780880" => "-118.2507394",
                                "c2ms5ebe8234166a58_32289595" => "541 S Spring St",
                                "c2ms5ebe824a1e2264_23574933" => "3",
                                "c2ms5ebe8256828f17_88449575" => "3",
                                "c2ms5ebe8261835ae4_72731516" => "3",
                                "c2ms5ebe82883c4c02_26205534" => "1",
                                "c2ms5ebe8292014ba3_15624834" => "2",
                                "c2ms5ebe82aaad7127_57149425" => "10000000.00",
                                "c2ms5ebe82b4a092c6_43811695" => "",
                                "c2ms5f0700ead5c485_36435315" => "200000.00",
                                "c2ms6022776b2ad751_19371410" => "300000.00",
                                "c2ms601aaf6fe84a88_11395294" => "100000.00",
                                "c2ms5f0700e83625e5_41388976" => "0.01000000",
                                "c2ms5f0700ebc11416_86077698" => "0.00000000",
                                "c2ms604b4fa2623586_30150508" => "0.00",
                                "c2ms5ffc41e2d2e5d2_80041972" => "0.03850000",
                                "c2ms5ffc41f2536d68_61175868" => "0.00000000",
                                "c2ms5ffc41f3a775a7_16038839" => "1.00000000",
                                "c2ms5ffc41f51a2c11_79991904" => "0.02800000",
                                "c2ms5ffc41f6736ea7_29507561" => "0.02800000",
                                "c2ms5fd0d0a14665e2_70058467" => "0.00000000",
                                "c2ms5fd0d0a29b8f05_46533208" => "0.02800000",
                                "c2ms5fd0d0a3c311c0_89547181" => "0.03150000",
                                "c2ms5fd0d0a50bcc76_36938064" => "10000000.00000000",
                                "c2ms5fd0d0a645d219_92656045" => "300000.00000000",
                                "c2ms5fd0d0a775fc22_48704390" => "200000.00000000",
                                "c2ms5fd0d0a8a10c10_49835334" => "100000.00000000",
                                "c2ms5fd0d0a9c8abd5_15945776" => "1.00000000",
                                "c2ms5fd0d0ab00d475_33762204" => "0.03150000",
                                "c2ms5f7d966dc73dd7_07375897" => "",
                                "c2ms5f7d96730a71a7_39400430" => "",
                                "c2ms5f7d96793b33f2_78330955" => ""
                            ],
                        ]
                    ],
                ]
            ],

            'files' => [
                [
                    'file_name' => 'test-file.json',
                    'file_renamed' => 'my_file.json',
                    'file_type' => 'text/json',
                    'file_size' => strlen('{"key": "my-key", "value": "this is value"}'),
                    'contents' => base64_encode('{"key": "my-key", "value": "this is value"}'),
                    'is_muted' => 0
                ],

                [
                    'file_name' => 'test-file-two.json',
                    'file_renamed' => 'hello_world.json',
                    'file_type' => 'text/json',
                    'file_size' => strlen('{"key": "my-key", "value": "this is value"}'),
                    'contents' => base64_encode('{"key": "my-key", "value": "this is value"}'),
                    'is_muted' => 0
                ],
            ]
        ];
    }

    protected function produceEAVObjectIdentifierCollection(PDO $pdo): array
    {
        $objects = $pdo->query("SELECT identifier FROM eav_objects")->fetchAll(PDO::FETCH_ASSOC);

        return array_map(fn(array $row) => $row['identifier'], $objects);
    }

    protected function getEAVInput(): array
    {
        return json_decode(\File::get(storage_path('testing/claim/create_claim_pipeline_eav_payload.json')), true);
    }

    protected function setUpDatabaseState(): void
    {
        $pdo = DB::connection()->getPdo();

        $pdo->query('SET FOREIGN_KEY_CHECKS = 0');

        // set up claim_sections_types
        $this->dbsetupClaimSectionsTypes($pdo);

        // set up claim statuses
        $this->dbsetupClaimStatuses($pdo);

        // set up claim_statuses2eav
        $this->dbsetupClaimStatus2EAV($pdo);

        // set up claims_types
        $this->dbsetupClaimTypes($pdo);

        // set up claim_types2eav
        $this->dbsetupClaimTypes2EAV($pdo);

        $pdo->query('SET FOREIGN_KEY_CHECKS = 1');
    }

    protected function dbsetupClaimSectionsTypes(PDO $pdo)
    {
        $pdo->query('TRUNCATE claims_api_sections_types');

        $data = [
            [
                'id' => 1,
                'title' => 'Loss Adjusters',
                'description' => 'N/A',
                'enabled' => 1,
                'config' => '{"component": "section-loss-adjuster"}'
            ],

            [
                'id' => 2,
                'title' => 'Suppliers',
                'description' => 'N/A',
                'enabled' => 1,
                'config' => '{"component": "section-suppliers"}'
            ],

            [
                'id' => 3,
                'title' => 'Policy Holders',
                'description' => 'N/A',
                'enabled' => 1,
                'config' => '{"component": "section-policy-holder"}'
            ]
        ];

        array_map(fn(array $record) => ClaimsSectionType::create($record), $data);
    }

    protected function dbsetupClaimStatuses(PDO $pdo)
    {
        $pdo->query('TRUNCATE claims_api_statuses');

        $data = [
            [
                "title" => "draft",
                "uuid" => "6ea65f69-e45d-409e-b740-9a18e7060cbd",
            ],
            [
                "title" => "fnol",
                "uuid" => "727abfdd-b726-4dac-a14e-241d9616dc4a"
            ],
            [
                "title" => "contacted",
                "uuid" => "7793ff1a-dac1-4a2e-aef6-e6d3a71c412b"
            ],
            [
                "title" => "assessing",
                "uuid" => "b7cf9e3c-e90b-4112-9e86-4bb3248805e8"
            ],
            [
                "title" => "coverageDetermined",
                "uuid" => "3137f934-b397-4c37-9e21-361187197b31"
            ],
            [
                "title" => "adjusting",
                "uuid" => "179c8997-cedb-4e51-b7c5-1c055496758f"
            ],
            [
                "title" => "closed",
                "uuid" => "31a93151-dce8-40cc-9b11-b36c70330410"
            ]
        ];

        array_map(fn(array $record) => ClaimStatus::create($record), $data);
    }

    protected function dbsetupClaimStatus2EAV(PDO $pdo)
    {
        $pdo->query('TRUNCATE TABLE claims_api_statuses2eavs');

        ClaimStatus2Eav::create([
            'status_id' => 1,
            'status_uuid' => '6ea65f69-e45d-409e-b740-9a18e7060cbd',
            'eav_object_uuid' => '8cfc936d-a678-11ea-b4d4-4a28775f739c',
            'eav_object_revision_uuid' => '8cfc936d-a678-11ea-b4d4-4a28775f739c',
        ]);
    }

    protected function dbsetupClaimTypes(PDO $pdo)
    {
        $pdo->query('TRUNCATE TABLE claims_api_types');

        $data = [
            [
                'uuid' => 'ad8d26c6-514a-11ed-a1be-0242ac120008',
                'parent_uuid' => null,
                'title' => 'Distributed',
                'amount_deductible_default' => 1.000,
                'amount_loss_adjusters_fee_default' => 2.000,
                'amount_reserve_default' => 3.000,
            ],

            [
                'uuid' => 'c22e91b3-514a-11ed-a1be-0242ac120008',
                'parent_uuid' => 'ad8d26c6-514a-11ed-a1be-0242ac120008',
                'title' => 'Synergized',
                'amount_deductible_default' => 4.000,
                'amount_loss_adjusters_fee_default' => 5.000,
                'amount_reserve_default' => 6.000,
            ],

            [
                'uuid' => 'c793b56b-514a-11ed-a1be-0242ac120008',
                'parent_uuid' => null,
                'title' => 'Incremental',
                'amount_deductible_default' => 7.000,
                'amount_loss_adjusters_fee_default' => 8.000,
                'amount_reserve_default' => 9.000,
            ],
        ];

        array_map(fn(array $record) => ClaimType::create($record), $data);
    }

    protected function dbsetupClaimTypes2EAV(PDO $pdo)
    {
        $pdo->query('TRUNCATE TABLE claims_api_types2eav');

        $data = [
            [
                'claim_type_id' => 1,
                'eav_object_uuid' => 'ca973636-c5af-11ec-ac91-0223a3b30884',
                'eav_object_revision_uuid' => 'ca973636-c5af-11ec-ac91-0223a3b30884',
            ],

            [
                'claim_type_id' => 2,
                'eav_object_uuid' => 'c2ea03fd-1a0b-11ec-8146-0223a3b30884',
                'eav_object_revision_uuid' => 'c2ea03fd-1a0b-11ec-8146-0223a3b30884',
            ]
        ];

        array_map(fn(array $record) => ClaimType2EAV::create($record), $data);
    }
}
